---
AWSTemplateFormatVersion: '2010-09-09'

Description: Pipeline to deploy Docker container

Resources:
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action: 'iam:PassRole'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 's3:PutObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetObject'
                  - 's3:GetBucketVersioning'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'ecr:DescribeImages'
                  - 'ecs:*'
  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: !Sub '${ArtifactBucket.Arn}/*'
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - ecr:GetAuthorizationToken
              -
                Effect: Allow
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DockerRepository}'
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
              -
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
  TriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action: codepipeline:StartPipelineExecution
  ArtifactBucket:
    Type: AWS::S3::Bucket
  GitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref 'AWS::StackName'
  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref 'AWS::StackName'
  Trigger:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt GitRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      State: ENABLED
      Targets:
        -
          Id: pipeline
          Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
          RoleArn: !GetAtt TriggerRole.Arn
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref 'AWS::StackName'
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      RestartExecutionOnUpdate: True
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Repository
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt GitRepository.Name
                BranchName: master
                PollForSourceChanges: False
              OutputArtifacts:
                - Name: SourceArtifact
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        -
          Name: Deploy
          Actions:
            -
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: cluster
                ServiceName: test
                # FileName: 'BuildArtifact::imagedefinitions.json'
              InputArtifacts:
                - Name: BuildArtifact
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      TimeoutInMinutes: 5
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0-1.7.0
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Type: PLAINTEXT
            Name: APPLICATION_NAME
            Value: !Ref 'AWS::StackName'
          -
            Type: PLAINTEXT
            Name: REPOSITORY_URI
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepository}'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - docker pull $REPOSITORY_URI:latest || exit 0
                - docker build -t $REPOSITORY_URI:latest ./source
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - printf '[{"name":"%s","imageUri":"%s"}]' $APPLICATION_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
          artifacts:
              files:
                - imagedefinitions.json
