---
AWSTemplateFormatVersion: '2010-09-09'

Description: Pipeline to deploy Docker container

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      VpcId:
        default: 'Which Virtual Private Network to use?'
      PublicSubnetIds:
        default: 'Where to create the Application Load Balancer?'
      PrivateSubnetIds:
        default: 'Where to launch the EC2 instances?'
      DesiredCount:
        default: 'How many containers to run?'
    ParameterGroups:
      -
        Label:
          default: 'Network Configuration'
        Parameters:
          - VpcId
          - PublicSubnetIds
          - PrivateSubnetIds
      -
        Label:
          default: 'Container Configuration'
        Parameters:
          - DesiredCount
      -
        Label:
          default: 'Optional Configuration'
        Parameters:
          - CertificateArn
          - HostedZoneName

Parameters:

  VpcId:
    Description: Virtual Private Cloud to run containers in
    Type: AWS::EC2::VPC::Id

  PublicSubnetIds:
    Description: Multiple public subnets to run load balancer in
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnetIds:
    Description: Multiple private subnets to run containers in
    Type: List<AWS::EC2::Subnet::Id>

  DesiredCount:
    Description: Number of containers to run in the cluster. (Keep 0 during creation)
    Type: Number
    Default: 0

  CertificateArn:
    Type: String
    Default: ''

  HostedZoneName:
    Type: String # AWS::Route53::HostedZone::Id
    Default: ''

Conditions:
  CreatePlainTextListener:
    !Equals [!Ref 'CertificateArn', '']
  CreateSecureListener:
    !Not [!Equals [!Ref 'CertificateArn', '']]
  CreateDnsRecord:
    !Not [!Equals [!Ref 'HostedZoneName', '']]

Resources:

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action: 'iam:PassRole'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 's3:PutObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetObject'
                  - 's3:GetBucketVersioning'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'ecr:DescribeImages'
                  - 'ecs:*'

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: !Sub '${ArtifactBucket.Arn}/*'
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - ecr:GetAuthorizationToken
              -
                Effect: Allow
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DockerRepository}'
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
              -
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
              -
                Effect: Allow
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                Action:
                  - ec2:CreateNetworkInterfacePermission
                Condition:
                  StringEquals:
                    ec2:AuthorizedService: codebuild.amazonaws.com

  TriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action: codepipeline:StartPipelineExecution

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - ecr:GetAuthorizationToken
              -
                Effect: Allow
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DockerRepository}'
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
              -
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  ArtifactBucket:
    Type: AWS::S3::Bucket

  GitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref 'AWS::StackName'

  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref 'AWS::StackName'

  Trigger:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt GitRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      State: ENABLED
      Targets:
        -
          Id: pipeline
          Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
          RoleArn: !GetAtt TriggerRole.Arn

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref 'AWS::StackName'
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      RestartExecutionOnUpdate: True
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Repository
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt GitRepository.Name
                BranchName: master
                PollForSourceChanges: False
              OutputArtifacts:
                - Name: SourceArtifact
        -
          Name: Test
          Actions:
            -
              Name: Test
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TestProject
              InputArtifacts:
                - Name: SourceArtifact
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        -
          Name: Deploy
          Actions:
            -
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref Cluster
                ServiceName: !GetAtt Service.Name
              InputArtifacts:
                - Name: BuildArtifact

  TestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      TimeoutInMinutes: 5
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: True
        Type: LINUX_CONTAINER
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets: !Ref PrivateSubnetIds
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
              commands:
                - pip install -r source/requirements.txt
                - pip install -r tests/requirements.txt
            build:
              commands:
                - pytest -v

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      TimeoutInMinutes: 5
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Type: PLAINTEXT
            Name: APPLICATION_NAME
            Value: !Ref 'AWS::StackName'
          -
            Type: PLAINTEXT
            Name: ECR_URI
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com'
          -
            Type: PLAINTEXT
            Name: REPOSITORY_URI
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepository}'
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets: !Ref PrivateSubnetIds
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - docker pull $REPOSITORY_URI:latest || exit 0
                - docker build -t $REPOSITORY_URI:latest ./source
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - printf '[{"name":"%s","imageUri":"%s"}]' $APPLICATION_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
          artifacts:
              files:
                - imagedefinitions.json

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'AWS::StackName'

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - PlainTextListener
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 10
      LoadBalancers:
        -
          ContainerName: !Ref 'AWS::StackName'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
             - !GetAtt TaskSecurityGroup.GroupId
          Subnets: !Ref PrivateSubnetIds
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'AWS::StackName'
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        -
          Name: !Ref 'AWS::StackName'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepository}:latest'
          Memory: 512
          PortMappings:
            -
              ContainerPort: 80

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from anywhere
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow nothing inbound
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      LoadBalancerAttributes:
        -
          Key: idle_timeout.timeout_seconds
          Value: 10

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        -
          Key: deregistration_delay.timeout_seconds
          Value: 10

  PlainTextListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        -
          !If
            - CreatePlainTextListener
            -
              Type: forward
              TargetGroupArn: !Ref TargetGroup
            -
              Type: redirect
              RedirectConfig:
                Port: 443
                Protocol: HTTPS
                StatusCode: HTTP_302

  SecureListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateSecureListener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-2019-08
      Certificates:
        -
          CertificateArn: !Ref CertificateArn
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref TargetGroup

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDnsRecord
    Properties:
      Type: A
      HostedZoneName: !Ref HostedZoneName
      Name: !Sub '${AWS::StackName}.${HostedZoneName}'
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId:  !GetAtt LoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: True
